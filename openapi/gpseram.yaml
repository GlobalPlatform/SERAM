openapi: "3.0.3"
info:
  title: "GP SERAM"
  version: "2.0.0"
  description: "This specification allows a Remote Admin Agent to manage a Secure\
    \ Element thanks to a Local Admin Agent.
    \ <br> <br> 2 layers is provided here:<br>\
    \ - the data model which details messages which are exchanges. Refer to the Schemas\
    \ section below.<br> - the HTTP REST binding, details in terms of HTTP GET and\
    \ POST methods. Refer to initialization and seApplicationManagement phase below.<br> <br> The\
    \ Remote Admin Agent is acting as an HTTP server and the Local Admin Agent as\
    \ an HTTP Client. During the initialization phase, the local Admin Agent provides a list of\
    \ supported data format and transport protocol. The server selects the best option <br>"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
tags:
- name: "seApplicationManagementService"
  description: "Remote Admin Agent performs the remote management by sending orders\
    \ to the Local Admin Agent"
servers:
      - url: '{protocol}://{domain}/gp/seram'
        variables:
          domain:
            default: localhost
            description: server domain
          protocol:
            enum:
              - http
              - https
            default: https
paths:
  /handshake:
    post:
      tags:
      - "seApplicationManagementService"
      summary: "method used to negociate data format and the transport protocol"
      description: "This method shall be used by the HTTP client to tell which data\
        \ formats and which transport protocols it supports. In response, the HTTP\
        \ server shall tell which ones it selects.<br> <br> The DataFormat describes\
        \ which data format is used for message payloads.<br> <br> The TransportProtocol\
        \ describes the transport protocol binding. It details how setting-up the\
        \ transport layer (if required), exchanging the messages payload between RAA\
        \ and LAA, keeping the integrity of the remote management session and resuming\
        \ communications in case of a data exchange failure<br> <br> The HTTP client shall\
        \ used the sessionId to allow the HTTP server to track the remote management. The\
        \ HTTP client shall reused the sessionId in all subsequent HTTP request to the\
        \ HTTP server"
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/sessionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ramHandshakeCommand"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:                
                $ref: "#/components/schemas/ramHandshakeResponse"
        "404":
          description: Session id not found
        "500":
          description: Unknown server error
  /remoteManagement:
    post:
      tags:
      - "seApplicationManagementService"
      summary: "Method used to respond to a remote management command."
      description: "This method shall be used by the HTTP client to transmit its response\
        \ to the HTTP server. <br><br> In response, the HTTP server shall send the next remote\
        \ management order."
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/sessionId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/remoteManagementMsg"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:                
                $ref: "#/components/schemas/remoteManagementOrder"
        "404":
          description: Session id not found
        "500":
          description: Unknown server error
components:
  schemas:
    apdu:
      description: "hexadecimal encoded APDU"
      type: "string"
      pattern: "([0-9A-F]{2})*"
    dataFormat:
      type: "string"
      enum:
      - "application/json"
      - "application/asn1"

    secureElement:
      type: "object"
      required:
        - seType
        - seId
      properties:
        seType:                  
          $ref: "#/components/schemas/seType"
        seId:
          type: "string"
          example: "89001012012341234012345678901224"
        seExtraInfo:
          type: "string"
          example: "SAM"

    sessionId:
      type: "string"      
      example: "0f96af97-f879-45a2-a011-ee7439df3804"

    transportProtocol:
      type: "string"
      enum:
      - "HTTPS"
      - "DTLS"   
    
      
    seType:
          type: "string"
          enum:
            - "eSE"
            - "iSE"            
            - "uicc"
            - "euicc"
            - "ieuicc"

    deviceRamStatusEnum:
      type: "string"
      enum:
      - "PROCESSED"
      - "POLLING"
      - "UNAVAILABLE_SE"
      - "UNKNOWN_FAILURE"
      - "UNGRANTED_ACCESS"

    deviceRamStatus:
       required:
        - deviceRamStatusEnum
        - executedRamCommands
       properties:
        deviceRamStatusEnum:        
          $ref: "#/components/schemas/deviceRamStatusEnum"
        executedRamCommands:
          type: integer
        errorMsg:        
          type: string

    version:
      type: "string"      
      example: "2.0.0"
    
    ramCommand:
      required:
        - ramCommandType
      discriminator: 
        propertyName: "ramCommandType"
        mapping:
            ramStartCommand: '#/components/schemas/ramStartCommand'
            seRamCommand: '#/components/schemas/seRamCommand'
            notificationCommand : '#/components/schemas/notificationCommand'
            ramStopCommand : '#/components/schemas/ramStopCommand'
      properties:
        ramCommandType:
          type: string
                  
            
    ramStartCommand:
      allOf:
        - $ref: '#/components/schemas/ramCommand' 
    ramStopCommand:
      allOf:
        - $ref: '#/components/schemas/ramCommand' 
    
    notificationCommand:
      allOf:
      - $ref: '#/components/schemas/ramCommand' 
      - required:
          - "deviceAppNotification"
      properties:
        deviceAppNotification:
          description: "notification string to send to the device Application"
          type: "string"
          example: "step1/action2/OK"

             
    seRamCommand:
      allOf:
      - $ref: '#/components/schemas/ramCommand' 
      - required:
          - "listOfCAPDU"
        properties:          
          listOfCAPDU:
            type: "array"
            items:
              $ref: "#/components/schemas/apdu"
            example: 
              - "00A4040008A00000015100000000"
      
    
    ramResponse:
      required:        
        - ramResponseType
      discriminator: 
        propertyName: "ramResponseType"
        mapping:
          seRamResponse: '#/components/schemas/seRamResponse'
      properties:
        ramResponseType:
          type: string
   
              
    seRamResponse:
      allOf:
      - $ref: '#/components/schemas/ramResponse' 
      - required:
          - "listOfRAPDU"
        properties:
          listOfRAPDU:
            type: "array"
            items:
              $ref: "#/components/schemas/apdu"
            example: 
              - "9000"
    
            
    remoteManagementOrder:
      description: "This is the data model for the remote management command."
      properties:
        delay:
          description: "Delay in second the device local agent had to wait before\
            \ sending data to the platform."
          type: "integer"
          default: 1
        ramCommands:
          type: array
          items:
            $ref: "#/components/schemas/ramCommand"

    remoteManagementMsg:
      description: "This is the data model for the remote management containing SE ram responses. A polling message shall be empty"
      type: "object"      
      required:
      - "deviceRamStatus"
      properties:
        deviceRamStatus:
          $ref: "#/components/schemas/deviceRamStatus"  
        chosenSecureElement:
          $ref: "#/components/schemas/secureElement"        
        ramResponses:
          description: "list of RAM responses"
          type: "array"
          items:
            $ref: "#/components/schemas/ramResponse"
            
    ramHandshakeCommand:
      description: "This is the data model for the handshake command. <br><br> If supportedTransportProtocol\
        \ is not provided, HTTPS is assumed. If supportedDataFormat is not provided,\
        \ application/json is assumed. <br>If supportedVersions is not provided, 2.0.0 is assumed. 
        secureElements shall be ordered by preference by the client. "
      type: "object"
      required:
      - "seIdType"
      - "seId"
      properties:
        secureElements:
          type: "array"
          items:
            $ref: "#/components/schemas/secureElement"
        supportedTransportProtocols:
          type: "array"
          items:
            $ref: "#/components/schemas/transportProtocol"
        supportedDataFormats:
          type: "array"
          items:
            $ref: "#/components/schemas/dataFormat"
        supportedVersions:
          type: "array"
          items:
            $ref: "#/components/schemas/version"

    ramHandshakeResponse:
      description: "This is the data model for the handshake response."
      type: "object"
      required:      
      - "chosenDataProtocol"
      - "chosenTransportProtocol"
      - "chosenVersion"
      properties:   
        chosenTransportProtocol:
          $ref: "#/components/schemas/transportProtocol"
        chosenDataFormat:
          $ref: "#/components/schemas/dataFormat"
        chosenVersion:
          $ref: "#/components/schemas/version"      
